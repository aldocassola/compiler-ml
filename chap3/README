This grammar for tiger only contains one shift-reduce conflict.

Shift/reduce conficts
---------------------
If/then vs If/then/else is fine. Shifting is equivalent to the second for which is what ml-yacc prefers.

How other s-r conflicts were handled
------------------------------------
I deal with the confusion b/w "id[exp]" and "typeid[exp] of exp" 
with an intermediate non-terminal:
bracketed : lvalue [ exp ] 

Then array declaration and lvalues become:
arraydec : bracketed of exp

lvalue : (...)
       | bracketed

This way the parser can always reduce to a temporary form and advance to 
see whether a FOR token awaits at the end. If not, then it is an lvalue.

I enforce binary expression precedence introducing nonterminals for
  * binexp which can be an assignment or a rhs
  * rhs of an assignment
  * OR of rhs
  * AND factors
  * COMP expressions (which do not associate)
  * term expressions incl minus and plus
  * factor expressions incl divide and times
      which and be unary minus'ed, parenthesized exp, constants, lvalues, 
      or function calls
in that order. This has the advantage of making the grammar unambiguous,
if a little more confusing. Maybe it is better to just use the yacc directives
for clarity?
