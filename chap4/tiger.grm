structure A = Absyn
structure S = Symbol

fun varlist_to_lvalue ([], sym, pos) =
              A.SimpleVar (sym, pos)
  | varlist_to_lvalue ((A.FieldVar (_, sym1, pos1)::rest), sym2, pos2) =
              A.FieldVar(varlist_to_lvalue (rest, sym2, pos2), sym1, pos1)
  | varlist_to_lvalue ((A.SubscriptVar (_, sym1, pos1)::rest), sym2, pos2) =
              A.SubscriptVar (varlist_to_lvalue (rest, sym2, pos2), sym1, pos1)
  | varlist_to_lvalue (_, sym, pos) = (ErrorMsg.error pos "Invalid variable";
                                        A.SimpleVar(sym, pos))

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm  program of A.exp | exp of A.exp | stm of A.exp | lvalue of A.var
          | binexp of A.exp | lvrest of A.var list
          | decs of A.dec list | dec of A.dec
          | tydec of A.onety | vardec of A.dec | fundecs of A.fundec list | ty of A.ty
          | tydecs of A.onety list | fundec of A.fundec
          | tyfields of A.field list | tyseq of A.field list | seqrest of (A.exp * A.pos) list
          | paramlist of A.exp list | bracketed of A.exp
          | paramrest of A.exp list | rhs of A.exp | andfactor of A.exp | compexp of A.exp
          | arithexp of A.exp
          | term of A.exp | factor of A.exp
          | fieldscreate of (A.symbol * A.exp * A.pos) list | fieldsrest of (A.symbol * A.exp * A.pos) list
          | exps of (A.exp * A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
  DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS

%%

program: stm                          (stm)

exp : lvalue                          (A.VarExp lvalue)
    | NIL                             (A.NilExp)
    | INT                             (A.IntExp INT)
    | STRING                          (A.StringExp (STRING, STRINGleft))
    | LPAREN stm RPAREN               (stm)
    | LPAREN stm SEMICOLON seqrest RPAREN
                                      (A.SeqExp ((stm, stmleft)::seqrest))
    | MINUS exp  %prec UMINUS         (A.OpExp {left=A.IntExp 0, oper=A.MinusOp,
                                                right=exp, pos=MINUSright})
    | exp PLUS exp                    (A.OpExp {left=exp1, oper=A.PlusOp,
                                                right=exp2, pos=PLUSleft})
    | exp MINUS exp                   (A.OpExp {left=exp1, oper=A.MinusOp,
                                                right=exp2, pos=MINUSleft})
    | exp TIMES exp                   (A.OpExp {left=exp1, oper=A.TimesOp,
                                                right=exp2, pos=TIMESleft})
    | exp DIVIDE exp                  (A.OpExp {left=exp1, oper=A.DivideOp,
                                                right=exp2, pos=DIVIDEleft})
    | exp EQ exp                      (A.OpExp {left=exp1, oper=A.EqOp,
                                                right=exp2, pos=EQleft})
    | exp NEQ exp                     (A.OpExp {left=exp1, oper=A.NeqOp,
                                                right=exp2, pos=NEQleft})
    | exp GT exp                      (A.OpExp {left=exp1, oper=A.GtOp,
                                                right=exp2, pos=GTleft})
    | exp LT exp                      (A.OpExp {left=exp1, oper=A.LtOp,
                                                right=exp2, pos=LTleft})
    | exp GE exp                      (A.OpExp {left=exp1, oper=A.GeOp,
                                                right=exp2, pos=GEleft})
    | exp LE exp                      (A.OpExp {left=exp1, oper=A.LeOp,
                                                right=exp2, pos=LEleft})
    | exp AND exp                     (A.IfExp {test=exp1, then'=exp2,
                                                else'=SOME(A.IntExp 0),
                                                pos=ANDleft})
    | exp OR exp                      (A.IfExp {test=exp1, then'=A.IntExp 1,
                                                else'=SOME exp2, pos=ORleft})
    | LET decs IN exps END            (A.LetExp {decs=decs,
                                                  body=A.SeqExp(exps),
                                                  pos=LETleft})
    | ID LBRACE fieldscreate RBRACE   (A.RecordExp {typ=S.symbol ID,
                                                    fields=fieldscreate,
                                                    pos=LBRACEleft})
    | ID LPAREN paramlist RPAREN      (A.CallExp {func=S.symbol ID,
                                                  args=paramlist,
                                                  pos=LPARENleft})
    | LPAREN RPAREN                   (A.SeqExp [])
    | BREAK                           (A.BreakExp BREAKleft)

stm : ID LBRACK exp RBRACK OF stm     (A.ArrayExp {typ=S.symbol ID, size=exp1,
                                                   init=stm, pos=OFleft})
    | IF exp THEN stm ELSE stm        (A.IfExp {test=exp, then'=stm1,
                                                else'=SOME stm2, pos=IFleft})
    | IF exp THEN stm                 (A.IfExp {test=exp, then'=stm,
                                                else'=NONE, pos=IFleft})
    | WHILE exp DO stm                (A.WhileExp {test=exp, body=stm,
                                                    pos=WHILEleft})
    | FOR ID ASSIGN exp TO exp DO stm (A.ForExp {var=S.symbol ID,
                                                  escape=ref false, lo=exp1,
                                                  hi=exp2, body=stm,
                                                  pos=FORleft})
    | lvalue ASSIGN stm               (A.AssignExp {var=lvalue, exp=stm,
                                                    pos=ASSIGNleft})
    | exp                             (exp)

decs : dec                            ([dec])
     | dec decs                       (dec::decs)

dec : tydecs                          (A.TypeDec tydecs)
    | vardec                          (vardec)
    | fundecs                         (A.FunctionDec fundecs)

tydecs: tydec                         ([tydec])
      | tydec tydecs                  (tydec::tydecs)

tydec : TYPE ID EQ ty                 ({name=S.symbol ID, ty=ty, pos=IDleft})

ty  : ID                              (A.NameTy (S.symbol ID, IDleft))
    | LBRACE tyfields RBRACE          (A.RecordTy tyfields)
    | ARRAY OF ID                     (A.ArrayTy (S.symbol ID, ARRAYleft))

tyfields :                            (nil)
         | ID COLON ID tyseq          ({name=S.symbol ID1, typ=S.symbol ID2,
                                        escape=ref false, pos=ID1left}::tyseq)

tyseq :                               (nil)
      | COMMA ID COLON ID tyseq       ({name=S.symbol ID1, typ=S.symbol ID2,
                                        escape=ref false, pos=ID1left}::tyseq)

vardec : VAR ID ASSIGN stm            (A.VarDec {name=S.symbol ID,
                                                  escape=ref false, typ=NONE,
                                                  init=stm, pos=ASSIGNleft})
       | VAR ID COLON ID ASSIGN stm   (A.VarDec {name=S.symbol ID1,
                                                  escape=ref false,
                                                  typ=SOME (S.symbol ID2,
                                                            ID2left),
                                                  init=stm, pos=ASSIGNleft})

fundecs : fundec                      ([fundec])
        | fundec fundecs              (fundec::fundecs)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ stm
                                      ({name=S.symbol ID, params=tyfields,
                                        result=NONE, body=stm,
                                        pos=FUNCTIONright})
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ stm
                                      ({name= S.symbol ID1, params=tyfields,
                                        result=SOME (S.symbol ID2, ID2left),
                                        body=stm, pos=FUNCTIONright})

lvalue : ID lvrest                    (varlist_to_lvalue
                                        (rev(lvrest), S.symbol ID, IDleft))

lvrest :                              ([])
       | DOT ID lvrest                (A.FieldVar(A.SimpleVar(S.symbol "", 0),
                                                   S.symbol ID,
                                                   DOTleft)::lvrest)
       | LBRACK exp RBRACK lvrest     (A.SubscriptVar(A.SimpleVar(S.symbol "",
                                                                  0),
                                                      exp,
                                                      LBRACKleft)::lvrest)

seqrest : stm                         ([(stm, stmleft)])
        | stm SEMICOLON seqrest       ((stm, stmleft)::seqrest)

exps :                                ([])
     | stm                            ([(stm, stmleft)])
     | stm SEMICOLON exps             ((stm, stmleft)::exps)

paramlist :                           (nil)
          | stm paramrest             (stm::paramrest)

paramrest :                           (nil)
          | COMMA stm paramrest       (stm::paramrest)

fieldscreate :                         (nil)
             | ID EQ stm fieldsrest    ((S.symbol ID, stm, IDleft)::fieldsrest)

fieldsrest :                           (nil)
           | COMMA ID EQ stm fieldsrest ((S.symbol ID, stm, IDleft)::fieldsrest)
