structure A = Absyn
structure S = Symbol
%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp of A.exp | program of A.exp | expseq of A.exp | lvalue of A.var
          | letexp of A.exp | funcall of A.exp | binexp of A.exp
          | recordcreate of A.exp | fieldscreate of (A.symbol * A.exp * A.pos) list
          | fieldsrest of (A.symbol * A.exp * A.pos) list | arraycreate of A.exp
          | ifthenelse of A.exp | ifthen of A.exp
          | whileexp of A.exp | forexp of A.exp | dec of A.dec | decs of A.dec list
          | vardec of A.dec | fundecs of A.fundec list
          | fundec of A.fundec | ty of A.ty | tydec of A.onety | tydecs of A.onety list
          | tyfields of A.field list | tyseq of A.field list
          | seqrest of (A.exp * A.pos) list
          | paramlist of A.exp list
          | paramrest of A.exp list | rhs of A.exp | andfactor of A.exp | compexp of A.exp
          | arithexp of A.exp
          | term of A.exp | factor of A.exp | compop of A.oper | brack of A.bracketed

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
  DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp (exp)

exp : expseq (expseq)
    | LPAREN RPAREN (A.NilExp)
    | letexp (letexp)
    | binexp (binexp)
    | recordcreate (recordcreate)
    | arraycreate (arraycreate)
    | ifthenelse (ifthenelse)
    | ifthen (ifthen)
    | whileexp (whileexp)
    | forexp (forexp)
    | BREAK (A.BreakExp(BREAKleft))

decs :                                (nil)
     | dec decs                       (dec :: decs)

dec : tydecs                          (A.TypeDec tydecs)
    | vardec                          (vardec)
    | fundecs                         (A.FunctionDec fundecs)

tydec : TYPE ID EQ ty                 ({name=S.symbol ID,
                                        ty=ty, pos=TYPEleft})

tydecs :                              (nil)
       | tydec tydecs                 (tydec :: tydecs)

ty  : ID                              (A.NameTy (S.symbol ID, IDleft))
    | LBRACE tyfields RBRACE          (A.RecordTy tyfields)
    | ARRAY OF ID                     (A.ArrayTy (S.symbol ID, ARRAYleft))

tyfields :                            (nil)
         | ID COLON ID tyseq          (({name=S.symbol ID1,
                                        typ=S.symbol ID2,
                                        escape=ref false,
                                        pos=ID1left}:A.field) :: tyseq)

tyseq:                            (nil)
     | COMMA ID COLON ID tyseq    (({name=S.symbol ID1,
                                    typ=S.symbol ID2,
                                    escape=ref false, pos=ID1left}:A.field) :: tyseq)

vardec : VAR ID ASSIGN exp            (A.VarDec {name=S.symbol ID,
                                       escape=ref false, typ=NONE,
                                       init=exp, pos=IDleft})
       | VAR ID COLON ID ASSIGN exp   (A.VarDec{name=S.symbol ID1,
                                                 escape=ref false,
                                                 typ=SOME(S.symbol ID2, COLONright),
                                                 init=exp, pos=ID1left})
fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp  ({name=S.symbol ID,
                                                      params=tyfields,
                                                      result=NONE,
                                                      body=exp, pos=IDleft})
       | FUNCTION ID LPAREN tyfields RPAREN  COLON ID EQ exp ({name=S.symbol ID,
                                                               params=tyfields,
                                                               result=SOME (S.symbol ID2,
                                                                             COLONleft),
                                                               body=exp, pos=IDleft})

fundecs :                             (nil)
        | fundec fundecs              (fundec :: fundecs)

lvalue : ID                           (A.SimpleVar(S.symbol ID, IDleft))
       | lvalue DOT ID                (A.FieldVar(lvalue, S.symbol ID, DOTleft))
       | brack                        (let val b = brack in
                                        case b of {name=sym,
                                                          exp=exp,
                                                          pos=pos} => A.SubscriptVar(A.SimpleVar(sym, pos), exp, pos)
                                        end
                                      )
       | lvalue LBRACK exp RBRACK     (A.SubscriptVar(lvalue, exp, LBRACKleft))

brack: ID LBRACK exp RBRACK                           ({name=S.symbol(ID), exp=exp, pos=LBRACKleft})

expseq : LPAREN exp SEMICOLON exp seqrest RPAREN   (A.SeqExp ((exp1, exp1left)::(exp2, exp2left)::seqrest))

seqrest :                             (nil)
        | SEMICOLON exp seqrest       ((exp, expleft)::seqrest)

funcall : ID LPAREN paramlist RPAREN  (A.CallExp {func=S.symbol ID,
                                                  args=paramlist,
                                                  pos=LPARENleft})

paramlist :                           (nil)
          | exp paramrest             (exp::paramrest)

paramrest :                           (nil)
          | COMMA exp paramrest       (exp::paramrest)

binexp : lvalue ASSIGN rhs            (A.AssignExp {var=lvalue,
                                                    exp=rhs,
                                                    pos=ASSIGNleft})
       | rhs                          (rhs)

(* left recursion for left association *)
rhs : rhs OR andfactor                (A.IfExp {test=rhs,
                                                then'=A.IntExp(1),
                                                else'= SOME(andfactor),
                                                pos=ORleft})
    | andfactor                       (andfactor)

andfactor : andfactor AND compexp     (A.IfExp {test=andfactor,
                                                then'=compexp,
                                                else'=SOME(A.IntExp(0)),
                                                pos=ANDleft})
          | compexp                   (compexp)

(* comparison operators do not associate *)
compexp : arithexp compop arithexp    (A.OpExp {left=arithexp1, oper=compop, right=arithexp2, pos=compopleft})
        | arithexp                    (arithexp)

arithexp : arithexp PLUS term         (A.OpExp {left=arithexp1, oper=A.PlusOp, right=term, pos=PLUSleft})
         | arithexp MINUS term        (A.OpExp {left=arithexp1, oper=A.MinusOp, right=term, pos=MINUSleft})
         | term                       (term)

term : term TIMES factor              (A.OpExp {left=term, oper=A.TimesOp, right=factor, pos=TIMESleft})
     | term DIVIDE factor             (A.OpExp {left=term, oper=A.DivideOp, right=factor, pos=DIVIDEleft})
     | factor                         (factor)

factor : NIL                          (A.NilExp)
       | INT                          (A.IntExp INT)
       | STRING                       (A.StringExp(STRING, STRINGleft))
       | lvalue                       (A.VarExp lvalue)
       | funcall                      (funcall)
       | LPAREN exp RPAREN            (exp)

       (* highest precedence; right recursion to right-associate *)
       | MINUS factor                 (A.OpExp {left=A.IntExp(0),
                                                oper=A.MinusOp,
                                                right=factor,
                                                pos=MINUSleft})

compop : EQ                           (A.EqOp)
       | NEQ                          (A.NeqOp)
       | LT                           (A.LtOp)
       | GT                           (A.GtOp)
       | GE                           (A.GeOp)
       | LE                           (A.LeOp)

letexp : LET decs IN exp END         (A.LetExp {decs=decs, body=exp, pos=LETleft})

recordcreate : ID LBRACE fieldscreate RBRACE       (A.RecordExp {fields=fieldscreate,
                                                                 typ=S.symbol ID,
                                                                 pos=LBRACEleft})

fieldscreate :                         (nil)
             | ID EQ exp fieldsrest    ((S.symbol ID, exp, EQleft)::fieldsrest)

fieldsrest :                            (nil)
           | COMMA ID EQ exp fieldsrest ((S.symbol ID, exp, EQleft)::fieldsrest)

arraycreate : brack OF exp             (let val br = brack
                                            in
                                                case br
                                                   of {name=sym,
                                                       exp=sz, pos=sympos} => A.ArrayExp{typ=sym, size=sz, init=exp, pos=sympos}
                                            end)

ifthenelse : IF exp THEN exp ELSE exp   (A.IfExp{test=exp1, then'=exp2, else'=SOME exp2, pos=IFleft})

ifthen : IF exp THEN exp                (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})

whileexp : WHILE exp DO exp                (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})

forexp : FOR ID ASSIGN exp TO exp DO exp   (A.ForExp{var=S.symbol ID, escape=ref false, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
